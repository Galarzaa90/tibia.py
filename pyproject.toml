[build-system]
requires = ["setuptools>=61"]
build-backend = "setuptools.build_meta"


[tool.setuptools.packages.find]
include = [
    "tibiapy*",
]

[project]
name = "tibia.py"
dynamic = ["version", "dependencies", "optional-dependencies"]
authors = [
    { name = "Allan Galarza", email = "allan.galarza@gmail.com" }
]
maintainers = [
    { name = "Allan Galarza", email = "allan.galarza@gmail.com" }
]
license = { text = 'Apache 2.0' }
description = "API that parses website content into python data."
requires-python = '>=3.9'
readme = "README.md"
classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Framework :: Pydantic :: 2',
    'Framework :: Pydantic',
    'Intended Audience :: Developers',
    'License :: OSI Approved :: Apache Software License',
    'Natural Language :: English',
    'Operating System :: OS Independent',
    'Programming Language :: Python :: 3 :: Only',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python',
    'Topic :: Games/Entertainment :: Role-Playing',
    'Topic :: Internet',
    'Topic :: Software Development :: Libraries :: Python Modules',
    'Topic :: Software Development :: Libraries',
    'Topic :: Software Development :: Libraries',
    'Topic :: Software Development',
    'Topic :: Text Processing :: Markup :: HTML',
    'Topic :: Utilities',
    'Typing :: Typed',
]

[project.urls]
"Homepage" = "https://tibiapy.readthedocs.io/"
"Documentation" = "https://tibiapy.readthedocs.io/"
"Repository" = "https://github.com/Galarzaa90/tibia.py"
"Changelog" = "https://tibiapy.readthedocs.io/en/latest/changelog.html"
"GitHub: Issues" = "https://github.com/Galarzaa90/tibia.py/issues"
"Coverage: Codecov" = "https://app.codecov.io/gh/Galarzaa90/tibia.py"
"Docker Hub: Repo" = "https://hub.docker.com/repository/docker/galarzaa90/tibia.py"
"SonarCloud" = "https://sonarcloud.io/dashboard?id=Galarzaa90_tibia.py"

[tool.setuptools.dynamic]
version = { attr = "tibiapy.__version__" }
dependencies = { file = ["requirements.txt"] }

[tool.setuptools.dynamic.optional-dependencies]
docs = { file = ["requirements-docs.txt"] }
server = { file = ["requirements-server.txt"] }
testing = { file = ["requirements-testing.txt"] }
linting = { file = ["requirements-linting.txt"] }


[tool.coverage.run]
source = ["tibiapy"]
relative_files = true
command_line = "-m unittest discover"
omit = [
    "**/builders/*.py",
]

[tool.coverage.report]
exclude_also = [
    "pragma: no cover",
    "if __name__ == .__main__.:",
    "def __repr__",
    "def __eq__",
    "def __len__",
    "def __lt__",
    "def __gt__",
    "return NotImplemented",
    "if TYPE_CHECKING:",
    "logger.debug\\(.*",
    "\\.{3}",
]


[tool.ruff]
exclude = [
    "__pycache__",
    ".git/",
    "build/",
    ".idea/",
    "venv/",
    "docs/",
    "logs/",
    "tests/",
]


[tool.ruff.lint]
select = [
    "E", "W293", # pycodestyle
    "F", # Pyflakes
    "N", # pep8-naming
    "D", # pydocstyle
    "UP", # pyupgrade
    "S", # flake8-bandit
    "B", # flake8-bugbear
    "COM", # flake8-commas
    "C4", # flake8-comprehensions
    "FA", # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "G", # flake8-logging-format
    "PIE", # flake8-pie
    "Q", # flake8-quotes
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
    "PERF", # Perflint
    "RUF", # Ruff-specific rules
    "ANN", # flake8-annotations
    "DTZ", # flake8-datetimez
    "PL", # Pylint
    "FURB", # refurb
]
ignore = [
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in `__init__`
    "ARG005", # Unused lambda argument
    "D203", # 1 blank line required before class docstring
    "D213", # 1 blank line required before class docstring
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
    "RUF013", # PEP 484 prohibits implicit `Optional`
    "ANN101", # Missing type annotation for {name} in method
    "ANN102", # Missing type annotation for {name} in classmethod
    "ANN202", # Missing return type annotation for private function {name}
    "ANN204", # Missing return type annotation for special method {name}
    "ANN401", # Dynamically typed expressions ({name}) are disallowed in `other`
    "PLR0913", # Too many arguments in function definition
    "PLR2004", #  Magic value used in comparison, consider replacing `{number}` with a constant variable
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["D104", "F401", "F403"]
"**/builders/*" = ["D"]
"tests/**" = ["D101"]
"server.py" = ["D100", "D103"]


[tool.ruff.lint.pycodestyle]
max-line-length = 120

[tool.ruff.lint.pep8-naming]
extend-ignore-names = ["assert*"]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.ruff.lint.flake8-bugbear]
# Allow default arguments like, e.g., `data: List[str] = fastapi.Query(None)`.
extend-immutable-calls = ["fastapi.Depends", "fastapi.Query", "fastapi.Path"]

[tool.ruff.lint.flake8-type-checking]
runtime-evaluated-base-classes = ["pydantic.BaseModel"]
