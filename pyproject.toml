[build-system]
requires = ["setuptools>=61"]
build-backend = "setuptools.build_meta"


[tool.setuptools.packages.find]
include = [
    "tibiapy*",
]

[project]
name = "tibia.py"
dynamic = ["version", "dependencies", "optional-dependencies"]
authors = [
    { name = "Allan Galarza", email = "allan.galarza@gmail.com" }
]
maintainers = [
    { name = "Allan Galarza", email = "allan.galarza@gmail.com" }
]
license = { text = 'Apache 2.0' }
description = "API that parses website content into python data."
requires-python = '>=3.8'
readme = "README.md"
classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Framework :: Pydantic :: 2',
    'Framework :: Pydantic',
    'Intended Audience :: Developers',
    'License :: OSI Approved :: Apache Software License',
    'Natural Language :: English',
    'Operating System :: OS Independent',
    'Programming Language :: Python :: 3 :: Only',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python',
    'Topic :: Games/Entertainment :: Role-Playing',
    'Topic :: Internet',
    'Topic :: Software Development :: Libraries :: Python Modules',
    'Topic :: Software Development :: Libraries',
    'Topic :: Software Development :: Libraries',
    'Topic :: Software Development',
    'Topic :: Text Processing :: Markup :: HTML',
    'Topic :: Utilities',
    'Typing :: Typed',
]

[project.urls]
"Homepage" = "https://tibiapy.readthedocs.io/"
"Documentation" = "https://tibiapy.readthedocs.io/"
"Repository" = "https://github.com/Galarzaa90/tibia.py"
"Changelog" = "https://tibiapy.readthedocs.io/en/latest/changelog.html"
"GitHub: Issues" = "https://github.com/Galarzaa90/tibia.py/issues"
"Coverage: Codecov" = "https://app.codecov.io/gh/Galarzaa90/tibia.py"
"Docker Hub: Repo" = "https://hub.docker.com/repository/docker/galarzaa90/tibia.py"
"SonarCloud" = "https://sonarcloud.io/dashboard?id=Galarzaa90_tibia.py"

[tool.setuptools.dynamic]
version = { attr = "tibiapy.__version__" }
dependencies = { file = ["requirements.txt"] }

[tool.setuptools.dynamic.optional-dependencies]
docs = { file = ["requirements-docs.txt"] }
server = { file = ["requirements-server.txt"] }
testing = { file = ["requirements-testing.txt"] }
linting = { file = ["requirements-linting.txt"] }


[tool.coverage.run]
source = ["tibiapy"]
relative_files = true
command_line = "-m unittest discover"
omit = [
    "**/builders/*.py",
]

[tool.coverage.report]
exclude_also = [
    "pragma: no cover",
    "if __name__ == .__main__.:",
    "def __repr__",
    "def __eq__",
    "def __len__",
    "def __lt__",
    "def __gt__",
    "return NotImplemented",
    "if TYPE_CHECKING:",
    "logger.debug\\(.*",
    "\\.{3}",
]


[tool.flake8]
max-line-length = 120
exclude = [
    "__pycache__",
    ".git/",
    "build/",
    ".idea/",
    "venv/",
    "docs/",
    "logs/",
    "tests/",
]
tee = true
# Ignore unused imports in __INIT__.py files
per-file-ignores = [
    "**/__init__.py:F401, F403",
    "server.py:D103,B008,TC002",
    "**/builders/*:D101",
]
count = true
ignore = [
    # flake8-docstrings: Missing docstring in public module
    "D100",
    # flake8-docstrings: Missing docstring in public method
    "D102",
    # flake8-docstrings: Missing docstring in public package
    "D104",
    # flake8-docstrings: Missing docstring in magic method
    "D105",
    # flake8-docstrings: Missing docstring in __init__
    "D107",
    # flake8: line break before binary operator
    "W503",
    # flake8: line too long (121 > 120 characters)
    "E501",
]
rst-roles = [
    "class",
    "py:attr",
    "obj",
    "meth",
    "attr",
    "exc",
]
rst-directives = [
    "versionadded",
    "versionchanged",
]
literal-inline-quotes = "double"
type-checking-pydantic-enabled = true

[tool.ruff]
exclude = [
    "__pycache__",
    ".git/",
    "build/",
    ".idea/",
    "venv/",
    "docs/",
    "logs/",
    "tests/",
]


[tool.ruff.per-file-ignores]
"__init__.py" = ["D104", "F401", "F403"]
"**/builders/*" = ["D"]
"tests/**" = ["D101"]
"server.py" = ["D100", "D103"]


[tool.ruff.lint]
select = [
    # pycodestyle
    "E", "W293",
    # Pyflakes
    "F",
    # pep8-naming
    "N",
    # pydocstyle
    "D",
    # pyupgrade
    "UP",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-commas
    "COM",
    # flake8-comprehensions
    "C4",
    # flake8-future-annotations
    "FA",
    # flake8-implicit-str-concat
    "ISC",
    # flake8-logging-format
    "G",
    # flake8-pie
    "PIE",
    # flake8-quotes
    "Q",
    # flake8-return
    "RET",
    # flake8-simplify
    "SIM",
    # flake8-unused-arguments
    "ARG",
    # Perflint
    "PERF",
    # Ruff-specific rules
    "RUF",
    # flake8-annotations
    "ANN",

]
ignore = [
    # Missing docstring in magic method
    "D105",
    # Missing docstring in `__init__`
    "D107",
    # Unused lambda argument
    "ARG005",
    # 1 blank line required before class docstring
    "D203",
    # 1 blank line required before class docstring
    "D213",
    # Mutable class attributes should be annotated with `typing.ClassVar`
    "RUF012",
    # PEP 484 prohibits implicit `Optional`
    "RUF013",
    # Missing type annotation for {name} in method
    "ANN101",
    # Missing type annotation for {name} in classmethod
    "ANN102",
    # Missing return type annotation for private function {name}
    "ANN202",
    # Missing return type annotation for special method {name}
    "ANN204",
]


[tool.ruff.lint.pycodestyle]
max-line-length = 120

[tool.ruff.lint.pep8-naming]
extend-ignore-names = ["assert*"]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.ruff.lint.flake8-bugbear]
# Allow default arguments like, e.g., `data: List[str] = fastapi.Query(None)`.
extend-immutable-calls = ["fastapi.Depends", "fastapi.Query", "fastapi.Path"]
